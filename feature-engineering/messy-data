# Missing values

Several reason could end in missing values like data recording issues, transformations, people not open to answer certain questions, etc.

```python 
# Subset the DataFrame
sub_df = so_survey_df[["Age", "Gender"]]

# Print the number of non-missing values
print(sub_df.notnull().sum())
```

IF they occurred at random. List wise deletion  (Drop rows). 

Drawbacks: 
* deletes valid data points
* relies on randomness
* Reduces information

## Drop rows with missing values

``` python
no_missing_values_rows = so_survey_df.dropna()
```

## Drop columns with missing values

``` python
no_missing_values_cols = so_survey_df.drop(so_survey_df.columns[so_survey_df.isnull().sum() > 0], axis=1)
```

## Drop specific columns with missing values

``` python
no_gender = so_survey_df.dropna(subset= ["Gender"])
```

## Replace values 

### Categorical

```python 
so_survey_df['Gender'].fillna(value="Not Given", inplace=True)
```

### Continuous  

Fit suitable values. Most used mean and median. When you split your data into train and test set you should use the one calculated in the train set to impute the test set (Data leakage)`

```python 
so_survey_df['StackOverflowJobsRecommend'].fillna(so_survey_df['StackOverflowJobsRecommend'].mean(), inplace=True)
```

# Other data issues

Replace values

```python 
so_survey_df['RawSalary'] = so_survey_df['RawSalary'].str.replace(',', '')
```

Find missing values

``` python
# Attempt to convert the column to numeric values
numeric_vals = pd.to_numeric(so_survey_df['RawSalary'], errors='coerce')

# Find the indexes of missing values
idx = numeric_vals.isna()

# Print the relevant rows
print(so_survey_df['RawSalary'][idx])

# Replace the offending characters
so_survey_df['RawSalary'] = so_survey_df['RawSalary'].str.replace('Â£', '')

# Convert the column to float
so_survey_df['RawSalary'] = so_survey_df['RawSalary'].astype('float')

# Print the column
print(so_survey_df['RawSalary'])
```